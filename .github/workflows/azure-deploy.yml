name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quotes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quotes_test

    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quotes_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build

  terraform-plan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: terraform

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: terraform
      env:
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform
      env:
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}

    - name: Get Terraform Outputs
      id: terraform
      run: |
        echo "acr_login_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT
        echo "app_service_name=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "database_fqdn=$(terraform output -raw database_fqdn)" >> $GITHUB_OUTPUT
      working-directory: terraform

    - name: Login to Azure Container Registry
      run: |
        ACR_NAME=$(echo "${{ steps.terraform.outputs.acr_login_server }}" | cut -d'.' -f1)
        az acr login --name $ACR_NAME

    - name: Build and push Docker image
      run: |
        docker build -t ${{ steps.terraform.outputs.acr_login_server }}/quote-service:${{ github.sha }} .
        docker build -t ${{ steps.terraform.outputs.acr_login_server }}/quote-service:latest .
        docker push ${{ steps.terraform.outputs.acr_login_server }}/quote-service:${{ github.sha }}
        docker push ${{ steps.terraform.outputs.acr_login_server }}/quote-service:latest

    - name: Run database migrations
      run: |
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://${{ secrets.DB_ADMIN_USERNAME }}:${{ secrets.DB_ADMIN_PASSWORD }}@${{ steps.terraform.outputs.database_fqdn }}:5432/quotes?sslmode=require

    - name: Restart App Service
      run: |
        az webapp restart \
          --name ${{ steps.terraform.outputs.app_service_name }} \
          --resource-group ${{ steps.terraform.outputs.resource_group_name }}

    - name: Wait for deployment
      run: sleep 30

    - name: Health check
      run: |
        APP_URL="https://${{ steps.terraform.outputs.app_service_name }}.azurewebsites.net"
        for i in {1..10}; do
          if curl -f "$APP_URL/health"; then
            echo "Health check passed"
            exit 0
          fi
          echo "Health check failed, retrying in 10 seconds..."
          sleep 10
        done
        echo "Health check failed after 10 attempts"
        exit 1

  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: terraform
      env:
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}